<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>java</artifactId>
    <groupId>graduation-design</groupId>
    <version>1.0.0</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>mapper</artifactId>
  <packaging>jar</packaging>
  <version>1.0.0</version>
  <name>mapper</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <!--依赖模块，mapper依赖base-->
    <dependency>
      <groupId>graduation-design</groupId>
      <artifactId>base</artifactId>
      <version>1.0.0</version>
    </dependency>
    <!--datasource-->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
    </dependency>
    <!--数据库驱动-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <type>jar</type>
    </dependency>
    <!--使用mybatis必须要-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
    </dependency>
  </dependencies>

  <!--maven灵活构建-->
  <profiles>
    <!-- 开发环境 -->
    <profile>
      <id>dev</id>
      <build>
        <filters>
          <filter>src/main/resources/env/dev/mapper.properties</filter>
        </filters>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <includes>
              <include>*.properties</include>
            </includes>
          </resource>
        </resources>
      </build>
      <activation>
        <activeByDefault>true</activeByDefault><!-- 设定默认为开发环境 -->
        <property>
          <name>env</name>  <!--如果存在系统属性env，值为dev，则激活当前配置-->
          <value>dev</value><!--还可以设置1、存在系统属性 2、存在文件 3、setting文件显示指定-->
        </property>         <!--4、操作系统环境 等额外四中方式进行激活，也就是说一共六种灵活构建方式-->
      </activation>
    </profile>

    <!-- 测试环境 -->
    <profile>
      <id>test</id>
      <build>
        <filters>
          <filter>src/main/resources/env/test/mapper.properties</filter>
        </filters>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <includes>
              <include>*.properties</include>
            </includes>
          </resource>
        </resources>
      </build>
      <activation>
        <property>
          <name>env</name>
          <value>test</value>
        </property>
      </activation>
    </profile>

    <!-- 线上环境 -->
    <profile>
      <id>online</id>
      <build>
        <filters>
          <filter>src/main/resources/env/online/mapper.properties</filter><!--类似于数据源，即从该目录下读取配置文件-->
        </filters>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering><!--启动filter-->
            <includes>
              <include>*.properties</include><!--用filter中读出的数据解析目标文件-->
            </includes>
          </resource>
        </resources>
      </build>
      <activation>
        <property>
          <name>env</name>
          <value>online</value>
        </property>
      </activation>
    </profile>
  </profiles>

  <!--清除=>编译=>测试=>报告=>打包=>安装=>部署-->
  <!--默认情况下，maven只会打包resources中的文件，所以在某些情况下我们需要进行手动文件的打包-->
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/java/</directory>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>   <!--compile插件默认只支持编译java1.3-->
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.8</source>  <!--手动配置使其支持java1.8-->
          <target>1.8</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
