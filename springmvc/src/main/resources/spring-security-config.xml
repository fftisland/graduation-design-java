<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans
                             http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                             http://www.springframework.org/schema/security
                             http://www.springframework.org/schema/security/spring-security-4.1.xsd">

<!-- 不需要进行安全认证的资源 -->
  <http pattern="/resources/**" security="none" />

  <http use-expressions="true" auto-config="true">
    <!--定义登录表单信息-->
    <!--还可以给form-login添加登录成功和失败后重定向到某个URL的属性:
  场景1:当用户没有直接访问登录页，被框架引导到登录页，成功登录后返回的应该是原目标页，那么如果他直接访问登录页呢，
  登录后的跳转页面就可以使用default-target-url指定。如果我就想强制指定登录后跳转页面，无论原路径如何，
  那么可以通过always-use-default-target属性来指定
  场景2:用户登录失败，通过设置authentication-failure-url属性来指定失败后定向到的url
  -->

    <!--既然有登录认证，那就存在成功和失败两种结果:
     场景1:自定义实现了AuthenticationSuccessHandler接口的类，注册到form-login的authentication-success-handler-ref属性，
     登录成功后会调用onAuthenticationSuccess(request,response,authentication)
     需要注意的是，如果定义了处理handler，那么之前定义的所有target-url都将失去作用
     场景2:自定义实现了继承失败handler的类，注册到authentication-failure-handler-ref属性中balabalabala...
    -->
    <form-login login-page="index.jsp" login-processing-url="login.do"
                username-parameter="username" password-parameter="password">

    </form-login>

    <intercept-url pattern="/index.jsp*" access="permitAll" />
    <intercept-url pattern="/user.jsp*" access="hasRole('ROLE_USER')" />
    <intercept-url pattern="/admin.jsp*" access="hasRole('ROLE_ADMIN')" />
    <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
  </http>
  <!-- 认证管理器  默认为ProviderManager-->
  <authentication-manager>
    <authentication-provider ref="provider" user-service-ref="myUserDetailService">
    </authentication-provider>
  </authentication-manager>

  <b:bean class="ZzzAhu163.service.security.MyAuthenticationProvider" id="provider">
  </b:bean>

  <b:bean id="myUserDetailService" class="ZzzAhu163.service.security.MyUserDetailService">
    <b:property name="userService" ref="userService"></b:property>
  </b:bean>
</b:beans>
